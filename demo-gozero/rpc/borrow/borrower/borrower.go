// Code generated by goctl. DO NOT EDIT.
// Source: borrow.proto

package borrower

import (
	"context"

	"bookstore/rpc/borrow/borrow"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BorrowReq  = borrow.BorrowReq
	BorrowResp = borrow.BorrowResp

	Borrower interface {
		Add(ctx context.Context, in *BorrowReq, opts ...grpc.CallOption) (*BorrowResp, error)
		List(ctx context.Context, in *BorrowReq, opts ...grpc.CallOption) (borrow.Borrower_ListClient, error)
	}

	defaultBorrower struct {
		cli zrpc.Client
	}
)

func NewBorrower(cli zrpc.Client) Borrower {
	return &defaultBorrower{
		cli: cli,
	}
}

func (m *defaultBorrower) Add(ctx context.Context, in *BorrowReq, opts ...grpc.CallOption) (*BorrowResp, error) {
	client := borrow.NewBorrowerClient(m.cli.Conn())
	return client.Add(ctx, in, opts...)
}

func (m *defaultBorrower) List(ctx context.Context, in *BorrowReq, opts ...grpc.CallOption) (borrow.Borrower_ListClient, error) {
	client := borrow.NewBorrowerClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}
