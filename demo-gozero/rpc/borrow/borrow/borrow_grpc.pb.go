// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: borrow.proto

package borrow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BorrowerClient is the client API for Borrower service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BorrowerClient interface {
	Add(ctx context.Context, in *BorrowReq, opts ...grpc.CallOption) (*BorrowResp, error)
	List(ctx context.Context, in *BorrowReq, opts ...grpc.CallOption) (Borrower_ListClient, error)
}

type borrowerClient struct {
	cc grpc.ClientConnInterface
}

func NewBorrowerClient(cc grpc.ClientConnInterface) BorrowerClient {
	return &borrowerClient{cc}
}

func (c *borrowerClient) Add(ctx context.Context, in *BorrowReq, opts ...grpc.CallOption) (*BorrowResp, error) {
	out := new(BorrowResp)
	err := c.cc.Invoke(ctx, "/borrow.borrower/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerClient) List(ctx context.Context, in *BorrowReq, opts ...grpc.CallOption) (Borrower_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Borrower_ServiceDesc.Streams[0], "/borrow.borrower/list", opts...)
	if err != nil {
		return nil, err
	}
	x := &borrowerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Borrower_ListClient interface {
	Recv() (*BorrowResp, error)
	grpc.ClientStream
}

type borrowerListClient struct {
	grpc.ClientStream
}

func (x *borrowerListClient) Recv() (*BorrowResp, error) {
	m := new(BorrowResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BorrowerServer is the server API for Borrower service.
// All implementations must embed UnimplementedBorrowerServer
// for forward compatibility
type BorrowerServer interface {
	Add(context.Context, *BorrowReq) (*BorrowResp, error)
	List(*BorrowReq, Borrower_ListServer) error
	mustEmbedUnimplementedBorrowerServer()
}

// UnimplementedBorrowerServer must be embedded to have forward compatible implementations.
type UnimplementedBorrowerServer struct {
}

func (UnimplementedBorrowerServer) Add(context.Context, *BorrowReq) (*BorrowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedBorrowerServer) List(*BorrowReq, Borrower_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBorrowerServer) mustEmbedUnimplementedBorrowerServer() {}

// UnsafeBorrowerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BorrowerServer will
// result in compilation errors.
type UnsafeBorrowerServer interface {
	mustEmbedUnimplementedBorrowerServer()
}

func RegisterBorrowerServer(s grpc.ServiceRegistrar, srv BorrowerServer) {
	s.RegisterService(&Borrower_ServiceDesc, srv)
}

func _Borrower_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/borrow.borrower/add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServer).Add(ctx, req.(*BorrowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Borrower_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BorrowReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BorrowerServer).List(m, &borrowerListServer{stream})
}

type Borrower_ListServer interface {
	Send(*BorrowResp) error
	grpc.ServerStream
}

type borrowerListServer struct {
	grpc.ServerStream
}

func (x *borrowerListServer) Send(m *BorrowResp) error {
	return x.ServerStream.SendMsg(m)
}

// Borrower_ServiceDesc is the grpc.ServiceDesc for Borrower service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Borrower_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "borrow.borrower",
	HandlerType: (*BorrowerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _Borrower_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "list",
			Handler:       _Borrower_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "borrow.proto",
}
