// Code generated by goctl. DO NOT EDIT.

package book

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bookFieldNames          = builder.RawFieldNames(&Book{}, true)
	bookRows                = strings.Join(bookFieldNames, ",")
	bookRowsExpectAutoSet   = strings.Join(stringx.Remove(bookFieldNames), ",")
	bookRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(bookFieldNames, "book"))

	cachePublicBookBookPrefix = "cache:public:book:book:"
)

type (
	bookModel interface {
		Insert(ctx context.Context, data *Book) (sql.Result, error)
		FindOne(ctx context.Context, book string) (*Book, error)
		Update(ctx context.Context, data *Book) error
		Delete(ctx context.Context, book string) error
	}

	defaultBookModel struct {
		sqlc.CachedConn
		table string
	}

	Book struct {
		Book  string `db:"book"`
		Price int64  `db:"price"`
	}
)

func newBookModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBookModel {
	return &defaultBookModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."book"`,
	}
}

func (m *defaultBookModel) Delete(ctx context.Context, book string) error {
	publicBookBookKey := fmt.Sprintf("%s%v", cachePublicBookBookPrefix, book)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where book = $1", m.table)
		return conn.ExecCtx(ctx, query, book)
	}, publicBookBookKey)
	return err
}

func (m *defaultBookModel) FindOne(ctx context.Context, book string) (*Book, error) {
	publicBookBookKey := fmt.Sprintf("%s%v", cachePublicBookBookPrefix, book)
	var resp Book
	err := m.QueryRowCtx(ctx, &resp, publicBookBookKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where book = $1 limit 1", bookRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, book)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBookModel) Insert(ctx context.Context, data *Book) (sql.Result, error) {
	publicBookBookKey := fmt.Sprintf("%s%v", cachePublicBookBookPrefix, data.Book)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2)", m.table, bookRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Book, data.Price)
	}, publicBookBookKey)
	return ret, err
}

func (m *defaultBookModel) Update(ctx context.Context, data *Book) error {
	publicBookBookKey := fmt.Sprintf("%s%v", cachePublicBookBookPrefix, data.Book)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where book = $1", m.table, bookRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Book, data.Price)
	}, publicBookBookKey)
	return err
}

func (m *defaultBookModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicBookBookPrefix, primary)
}

func (m *defaultBookModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where book = $1 limit 1", bookRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBookModel) tableName() string {
	return m.table
}
