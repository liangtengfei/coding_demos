// Code generated by goctl. DO NOT EDIT.

package record

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	recordFieldNames          = builder.RawFieldNames(&Record{}, true)
	recordRows                = strings.Join(recordFieldNames, ",")
	recordRowsExpectAutoSet   = strings.Join(stringx.Remove(recordFieldNames, "id"), ",")
	recordRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(recordFieldNames, "id"))

	cachePublicRecordIdPrefix = "cache:public:record:id:"
)

type (
	recordModel interface {
		Insert(ctx context.Context, data *Record) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Record, error)
		Update(ctx context.Context, data *Record) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRecordModel struct {
		sqlc.CachedConn
		table string
	}

	Record struct {
		Id        int64        `db:"id"`
		Book      string       `db:"book"`
		CreatedAt sql.NullTime `db:"created_at"`
		UpdatedAt sql.NullTime `db:"updated_at"`
	}
)

func newRecordModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultRecordModel {
	return &defaultRecordModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."record"`,
	}
}

func (m *defaultRecordModel) Delete(ctx context.Context, id int64) error {
	publicRecordIdKey := fmt.Sprintf("%s%v", cachePublicRecordIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicRecordIdKey)
	return err
}

func (m *defaultRecordModel) FindOne(ctx context.Context, id int64) (*Record, error) {
	publicRecordIdKey := fmt.Sprintf("%s%v", cachePublicRecordIdPrefix, id)
	var resp Record
	err := m.QueryRowCtx(ctx, &resp, publicRecordIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", recordRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRecordModel) Insert(ctx context.Context, data *Record) (sql.Result, error) {
	publicRecordIdKey := fmt.Sprintf("%s%v", cachePublicRecordIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, recordRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Book, data.CreatedAt, data.UpdatedAt)
	}, publicRecordIdKey)
	return ret, err
}

func (m *defaultRecordModel) Update(ctx context.Context, data *Record) error {
	publicRecordIdKey := fmt.Sprintf("%s%v", cachePublicRecordIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, recordRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Book, data.CreatedAt, data.UpdatedAt)
	}, publicRecordIdKey)
	return err
}

func (m *defaultRecordModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicRecordIdPrefix, primary)
}

func (m *defaultRecordModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", recordRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRecordModel) tableName() string {
	return m.table
}
